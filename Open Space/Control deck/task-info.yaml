type: edu
files:
- name: src/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Open Space</title>
    </head>
    <body>
        Hello, World!
    </body>
    </html>
  learner_created: false
- name: hstest/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    // '..' since we're in the test/ subdirectory; learner is supposed to have src/index.html
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');

    const hs = require('hs-test-web');

    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    async function stageTest() {
        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args:['--start-maximized']
        });

        const page = await browser.newPage();
        await page.goto(pagePath);

        page.on('console', msg => console.log(msg.text()));

        await sleep(1000);

        let result = await hs.testPage(page,
            //#test1
            //testing structure of the page
            () => {
                let body = document.getElementsByTagName("body")[0];
                if (!(body && body.children.length === 1 &&
                    body.children[0].tagName.toLowerCase() === 'div' &&
                    body.children[0].className === 'space')
                ) return hs.wrong("There are some mismatches with suggested structure or elements naming")

                let space = body.children[0];
                if (!(space.children.length === 2 &&
                    space.children[0].tagName.toLowerCase() === 'div' && space.children[1].tagName.toLowerCase() === 'div' &&
                    ( space.children[0].className === 'planet-area' && space.children[1].className === 'control-panel' ||
                        space.children[1].className === 'planet-area' && space.children[0].className === 'control-panel'))
                ) return hs.wrong("There are some mismatches with suggested structure or elements naming on the space section level")

                let planetArea = document.getElementsByClassName('planet-area')
                if (planetArea.length === 0) {
                    return hs.wrong("Can't find element with class=\"planet-area\"");
                }
                if (!(planetArea[0].children.length === 2 &&
                    planetArea[0].children[0].tagName.toLowerCase() === 'img' &&
                    planetArea[0].children[1].tagName.toLowerCase() === 'img' && (
                        planetArea[0].children[0].className === 'planet' && planetArea[0].children[1].className === 'rocket' ||
                        planetArea[0].children[1].className === 'planet' && planetArea[0].children[0].className === 'rocket'))
                )return hs.wrong("There are some mismatches with suggested structure or elements naming in planet-area section")

                let controlPanel = document.getElementsByClassName('control-panel');
                if (controlPanel.length === 0) {
                    return hs.wrong("Can't find element with class=\"control-panel\"");
                }
                let controlPanelInner = controlPanel[0]
                if (!(controlPanelInner.children.length === 5 &&
                    controlPanelInner.getElementsByTagName('input').length === 14 &&
                    controlPanelInner.getElementsByTagName('div').length === 2
                )) return hs.wrong("There are some mismatches with suggested structure or elements naming in control-panel section")

                return hs.correct()
            },
            //#test2
            //testing types of the check-buttons inputs
            () => {
                let checkBtnsDiv = document.getElementsByClassName("check-buttons");
                if (checkBtnsDiv.length === 0) {
                    return hs.wrong("Can't find element with class=\"check-buttons\"");
                }
                let checkBtns = Array.from(checkBtnsDiv[0].children);
                checkBtns.forEach( el => {
                    if (el.tagName.toLowerCase() !== 'input' || el.type.toLowerCase() !== 'checkbox') {
                        return hs.wrong('Each element in the check-buttons div should be an input with checkbox type')
                    }
                })

                return hs.correct();
            },
            //#test3
            //testing types of the levers inputs
            () => {
                let leversDiv = document.getElementsByClassName("levers");
                if (leversDiv.length === 0) {
                    return hs.wrong("Can't find element with class=\"levers\"");
                }
                let leversInputs = Array.from(leversDiv[0].children);
                leversInputs.forEach( el => {
                    if (el.tagName.toLowerCase() !== 'input' || el.type.toLowerCase() !== 'range') {
                        return hs.wrong('Each element in the levers div should be an input with range type')
                    }
                })

                return hs.correct();
            },
            //#test4
            //testing background of space
            () => {
                let space = document.getElementsByClassName("space");
                if (space.length === 0) {
                    return hs.wrong("Can't find element with class=\"space\"");
                }
                let spaceBg = window.getComputedStyle(space[0]).backgroundImage;
                if (!spaceBg) return hs.wrong("The element with class='space' should have background-image.");

                return hs.correct();
            },
            //#test5
            //panel top should be not lower then 1/3 of the space height
            () => {
                const controlDeck = document.body.getElementsByClassName("control-panel");
                const space = document.body.getElementsByClassName("space");

                if (controlDeck.length === 0) return hs.wrong("There no element with class='control-panel'");
                if (space.length === 0) return hs.wrong("There no element with class='space'");

                const controlDeckTop = parseInt(window.getComputedStyle(controlDeck[0]).top);
                const spaceHeight = space[0].scrollHeight

                if (controlDeckTop < spaceHeight / 3) return  hs.wrong("The control panel element is placed too low");

                return hs.correct();
            },
            //#test6
            //testing background of the panel
            () => {
                let controlDeck = document.getElementsByClassName("control-panel");
                if (controlDeck.length === 0) {
                    return hs.wrong("Can't find element with class=\"control-panel\"");
                }
                let controlDeckBgClr = window.getComputedStyle(controlDeck[0]).backgroundColor;
                if (!controlDeckBgClr) return hs.wrong("The element with class='control-panel' should have background-color.");

                return hs.correct();
            },
            //#test7
            //testing positioning of check-buttons and levers
            /*display: flex;
        flex-direction: row;*/
            () => {
                let checkBtnsDiv = document.getElementsByClassName("check-buttons")[0];
                let leversDiv = document.getElementsByClassName("levers")[0];

                let checkBtnsDivStyles = window.getComputedStyle(checkBtnsDiv);
                let leversDivStyles = window.getComputedStyle(leversDiv);

                if (checkBtnsDivStyles.display.toLowerCase() !== 'flex' || leversDivStyles.display.toLowerCase() !== 'flex') {
                    return hs.wrong('Elements check-buttons and levers should have display: flex property.')
                }

                if (checkBtnsDivStyles.flexDirection.toLowerCase() !== 'row' || leversDivStyles.flexDirection.toLowerCase() !== 'row') {
                    return hs.wrong('Elements check-buttons and levers should be positioned in a row.')
                }

                return hs.correct();
            },
            //#test8
            //testing that levers positioned vertical
            () => {
                let leversDiv = document.getElementsByClassName('levers')[0];
                let levers = Array.from(leversDiv.getElementsByTagName('input'));
                levers.forEach( lever => {
                    let leverStyle = window.getComputedStyle(lever);
                    if (!leverStyle.transform) return hs.wrong("All levers should be vertical.")
                })

                return hs.correct();
            }
        )

        await browser.close();
        return result;
    }

    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
- name: src/images/mars.png
  visible: true
  learner_created: true
- name: src/images/rocket.png
  visible: true
  learner_created: true
- name: src/images/space.png
  visible: true
  learner_created: true
- name: src/styles.css
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/143/stages/772/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 11 Jan 2022 18:30:47 UTC
record: 7
